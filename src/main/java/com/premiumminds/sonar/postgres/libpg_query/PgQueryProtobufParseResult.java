package com.premiumminds.sonar.postgres.libpg_query;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PgQueryProtobufParseResult extends Structure {
    /** C type : PgQueryProtobuf */
    public PgQueryProtobuf parse_tree;
    /** C type : char* */
    public Pointer stderr_buffer;
    /** C type : PgQueryError* */
    public PgQueryError.ByReference error;
    public PgQueryProtobufParseResult() {
        super();
    }
    @Override
    protected List<String> getFieldOrder() {
        return Arrays.asList("parse_tree", "stderr_buffer", "error");
    }
    /**
     * @param parse_tree C type : PgQueryProtobuf<br>
     * @param stderr_buffer C type : char*<br>
     * @param error C type : PgQueryError*
     */
    public PgQueryProtobufParseResult(PgQueryProtobuf parse_tree, Pointer stderr_buffer, PgQueryError.ByReference error) {
        super();
        this.parse_tree = parse_tree;
        this.stderr_buffer = stderr_buffer;
        this.error = error;
    }
    public PgQueryProtobufParseResult(Pointer peer) {
        super(peer);
    }
    public static class ByReference extends PgQueryProtobufParseResult implements Structure.ByReference {

    };
    public static class ByValue extends PgQueryProtobufParseResult implements Structure.ByValue {

    };
}