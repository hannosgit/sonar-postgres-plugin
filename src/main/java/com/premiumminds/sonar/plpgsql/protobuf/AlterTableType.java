// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pg_query.proto

package com.premiumminds.sonar.plpgsql.protobuf;

/**
 * Protobuf enum {@code pg_query.AlterTableType}
 */
public enum AlterTableType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ALTER_TABLE_TYPE_UNDEFINED = 0;</code>
   */
  ALTER_TABLE_TYPE_UNDEFINED(0),
  /**
   * <code>AT_AddColumn = 1;</code>
   */
  AT_AddColumn(1),
  /**
   * <code>AT_AddColumnRecurse = 2;</code>
   */
  AT_AddColumnRecurse(2),
  /**
   * <code>AT_AddColumnToView = 3;</code>
   */
  AT_AddColumnToView(3),
  /**
   * <code>AT_ColumnDefault = 4;</code>
   */
  AT_ColumnDefault(4),
  /**
   * <code>AT_CookedColumnDefault = 5;</code>
   */
  AT_CookedColumnDefault(5),
  /**
   * <code>AT_DropNotNull = 6;</code>
   */
  AT_DropNotNull(6),
  /**
   * <code>AT_SetNotNull = 7;</code>
   */
  AT_SetNotNull(7),
  /**
   * <code>AT_DropExpression = 8;</code>
   */
  AT_DropExpression(8),
  /**
   * <code>AT_CheckNotNull = 9;</code>
   */
  AT_CheckNotNull(9),
  /**
   * <code>AT_SetStatistics = 10;</code>
   */
  AT_SetStatistics(10),
  /**
   * <code>AT_SetOptions = 11;</code>
   */
  AT_SetOptions(11),
  /**
   * <code>AT_ResetOptions = 12;</code>
   */
  AT_ResetOptions(12),
  /**
   * <code>AT_SetStorage = 13;</code>
   */
  AT_SetStorage(13),
  /**
   * <code>AT_DropColumn = 14;</code>
   */
  AT_DropColumn(14),
  /**
   * <code>AT_DropColumnRecurse = 15;</code>
   */
  AT_DropColumnRecurse(15),
  /**
   * <code>AT_AddIndex = 16;</code>
   */
  AT_AddIndex(16),
  /**
   * <code>AT_ReAddIndex = 17;</code>
   */
  AT_ReAddIndex(17),
  /**
   * <code>AT_AddConstraint = 18;</code>
   */
  AT_AddConstraint(18),
  /**
   * <code>AT_AddConstraintRecurse = 19;</code>
   */
  AT_AddConstraintRecurse(19),
  /**
   * <code>AT_ReAddConstraint = 20;</code>
   */
  AT_ReAddConstraint(20),
  /**
   * <code>AT_ReAddDomainConstraint = 21;</code>
   */
  AT_ReAddDomainConstraint(21),
  /**
   * <code>AT_AlterConstraint = 22;</code>
   */
  AT_AlterConstraint(22),
  /**
   * <code>AT_ValidateConstraint = 23;</code>
   */
  AT_ValidateConstraint(23),
  /**
   * <code>AT_ValidateConstraintRecurse = 24;</code>
   */
  AT_ValidateConstraintRecurse(24),
  /**
   * <code>AT_AddIndexConstraint = 25;</code>
   */
  AT_AddIndexConstraint(25),
  /**
   * <code>AT_DropConstraint = 26;</code>
   */
  AT_DropConstraint(26),
  /**
   * <code>AT_DropConstraintRecurse = 27;</code>
   */
  AT_DropConstraintRecurse(27),
  /**
   * <code>AT_ReAddComment = 28;</code>
   */
  AT_ReAddComment(28),
  /**
   * <code>AT_AlterColumnType = 29;</code>
   */
  AT_AlterColumnType(29),
  /**
   * <code>AT_AlterColumnGenericOptions = 30;</code>
   */
  AT_AlterColumnGenericOptions(30),
  /**
   * <code>AT_ChangeOwner = 31;</code>
   */
  AT_ChangeOwner(31),
  /**
   * <code>AT_ClusterOn = 32;</code>
   */
  AT_ClusterOn(32),
  /**
   * <code>AT_DropCluster = 33;</code>
   */
  AT_DropCluster(33),
  /**
   * <code>AT_SetLogged = 34;</code>
   */
  AT_SetLogged(34),
  /**
   * <code>AT_SetUnLogged = 35;</code>
   */
  AT_SetUnLogged(35),
  /**
   * <code>AT_DropOids = 36;</code>
   */
  AT_DropOids(36),
  /**
   * <code>AT_SetTableSpace = 37;</code>
   */
  AT_SetTableSpace(37),
  /**
   * <code>AT_SetRelOptions = 38;</code>
   */
  AT_SetRelOptions(38),
  /**
   * <code>AT_ResetRelOptions = 39;</code>
   */
  AT_ResetRelOptions(39),
  /**
   * <code>AT_ReplaceRelOptions = 40;</code>
   */
  AT_ReplaceRelOptions(40),
  /**
   * <code>AT_EnableTrig = 41;</code>
   */
  AT_EnableTrig(41),
  /**
   * <code>AT_EnableAlwaysTrig = 42;</code>
   */
  AT_EnableAlwaysTrig(42),
  /**
   * <code>AT_EnableReplicaTrig = 43;</code>
   */
  AT_EnableReplicaTrig(43),
  /**
   * <code>AT_DisableTrig = 44;</code>
   */
  AT_DisableTrig(44),
  /**
   * <code>AT_EnableTrigAll = 45;</code>
   */
  AT_EnableTrigAll(45),
  /**
   * <code>AT_DisableTrigAll = 46;</code>
   */
  AT_DisableTrigAll(46),
  /**
   * <code>AT_EnableTrigUser = 47;</code>
   */
  AT_EnableTrigUser(47),
  /**
   * <code>AT_DisableTrigUser = 48;</code>
   */
  AT_DisableTrigUser(48),
  /**
   * <code>AT_EnableRule = 49;</code>
   */
  AT_EnableRule(49),
  /**
   * <code>AT_EnableAlwaysRule = 50;</code>
   */
  AT_EnableAlwaysRule(50),
  /**
   * <code>AT_EnableReplicaRule = 51;</code>
   */
  AT_EnableReplicaRule(51),
  /**
   * <code>AT_DisableRule = 52;</code>
   */
  AT_DisableRule(52),
  /**
   * <code>AT_AddInherit = 53;</code>
   */
  AT_AddInherit(53),
  /**
   * <code>AT_DropInherit = 54;</code>
   */
  AT_DropInherit(54),
  /**
   * <code>AT_AddOf = 55;</code>
   */
  AT_AddOf(55),
  /**
   * <code>AT_DropOf = 56;</code>
   */
  AT_DropOf(56),
  /**
   * <code>AT_ReplicaIdentity = 57;</code>
   */
  AT_ReplicaIdentity(57),
  /**
   * <code>AT_EnableRowSecurity = 58;</code>
   */
  AT_EnableRowSecurity(58),
  /**
   * <code>AT_DisableRowSecurity = 59;</code>
   */
  AT_DisableRowSecurity(59),
  /**
   * <code>AT_ForceRowSecurity = 60;</code>
   */
  AT_ForceRowSecurity(60),
  /**
   * <code>AT_NoForceRowSecurity = 61;</code>
   */
  AT_NoForceRowSecurity(61),
  /**
   * <code>AT_GenericOptions = 62;</code>
   */
  AT_GenericOptions(62),
  /**
   * <code>AT_AttachPartition = 63;</code>
   */
  AT_AttachPartition(63),
  /**
   * <code>AT_DetachPartition = 64;</code>
   */
  AT_DetachPartition(64),
  /**
   * <code>AT_AddIdentity = 65;</code>
   */
  AT_AddIdentity(65),
  /**
   * <code>AT_SetIdentity = 66;</code>
   */
  AT_SetIdentity(66),
  /**
   * <code>AT_DropIdentity = 67;</code>
   */
  AT_DropIdentity(67),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ALTER_TABLE_TYPE_UNDEFINED = 0;</code>
   */
  public static final int ALTER_TABLE_TYPE_UNDEFINED_VALUE = 0;
  /**
   * <code>AT_AddColumn = 1;</code>
   */
  public static final int AT_AddColumn_VALUE = 1;
  /**
   * <code>AT_AddColumnRecurse = 2;</code>
   */
  public static final int AT_AddColumnRecurse_VALUE = 2;
  /**
   * <code>AT_AddColumnToView = 3;</code>
   */
  public static final int AT_AddColumnToView_VALUE = 3;
  /**
   * <code>AT_ColumnDefault = 4;</code>
   */
  public static final int AT_ColumnDefault_VALUE = 4;
  /**
   * <code>AT_CookedColumnDefault = 5;</code>
   */
  public static final int AT_CookedColumnDefault_VALUE = 5;
  /**
   * <code>AT_DropNotNull = 6;</code>
   */
  public static final int AT_DropNotNull_VALUE = 6;
  /**
   * <code>AT_SetNotNull = 7;</code>
   */
  public static final int AT_SetNotNull_VALUE = 7;
  /**
   * <code>AT_DropExpression = 8;</code>
   */
  public static final int AT_DropExpression_VALUE = 8;
  /**
   * <code>AT_CheckNotNull = 9;</code>
   */
  public static final int AT_CheckNotNull_VALUE = 9;
  /**
   * <code>AT_SetStatistics = 10;</code>
   */
  public static final int AT_SetStatistics_VALUE = 10;
  /**
   * <code>AT_SetOptions = 11;</code>
   */
  public static final int AT_SetOptions_VALUE = 11;
  /**
   * <code>AT_ResetOptions = 12;</code>
   */
  public static final int AT_ResetOptions_VALUE = 12;
  /**
   * <code>AT_SetStorage = 13;</code>
   */
  public static final int AT_SetStorage_VALUE = 13;
  /**
   * <code>AT_DropColumn = 14;</code>
   */
  public static final int AT_DropColumn_VALUE = 14;
  /**
   * <code>AT_DropColumnRecurse = 15;</code>
   */
  public static final int AT_DropColumnRecurse_VALUE = 15;
  /**
   * <code>AT_AddIndex = 16;</code>
   */
  public static final int AT_AddIndex_VALUE = 16;
  /**
   * <code>AT_ReAddIndex = 17;</code>
   */
  public static final int AT_ReAddIndex_VALUE = 17;
  /**
   * <code>AT_AddConstraint = 18;</code>
   */
  public static final int AT_AddConstraint_VALUE = 18;
  /**
   * <code>AT_AddConstraintRecurse = 19;</code>
   */
  public static final int AT_AddConstraintRecurse_VALUE = 19;
  /**
   * <code>AT_ReAddConstraint = 20;</code>
   */
  public static final int AT_ReAddConstraint_VALUE = 20;
  /**
   * <code>AT_ReAddDomainConstraint = 21;</code>
   */
  public static final int AT_ReAddDomainConstraint_VALUE = 21;
  /**
   * <code>AT_AlterConstraint = 22;</code>
   */
  public static final int AT_AlterConstraint_VALUE = 22;
  /**
   * <code>AT_ValidateConstraint = 23;</code>
   */
  public static final int AT_ValidateConstraint_VALUE = 23;
  /**
   * <code>AT_ValidateConstraintRecurse = 24;</code>
   */
  public static final int AT_ValidateConstraintRecurse_VALUE = 24;
  /**
   * <code>AT_AddIndexConstraint = 25;</code>
   */
  public static final int AT_AddIndexConstraint_VALUE = 25;
  /**
   * <code>AT_DropConstraint = 26;</code>
   */
  public static final int AT_DropConstraint_VALUE = 26;
  /**
   * <code>AT_DropConstraintRecurse = 27;</code>
   */
  public static final int AT_DropConstraintRecurse_VALUE = 27;
  /**
   * <code>AT_ReAddComment = 28;</code>
   */
  public static final int AT_ReAddComment_VALUE = 28;
  /**
   * <code>AT_AlterColumnType = 29;</code>
   */
  public static final int AT_AlterColumnType_VALUE = 29;
  /**
   * <code>AT_AlterColumnGenericOptions = 30;</code>
   */
  public static final int AT_AlterColumnGenericOptions_VALUE = 30;
  /**
   * <code>AT_ChangeOwner = 31;</code>
   */
  public static final int AT_ChangeOwner_VALUE = 31;
  /**
   * <code>AT_ClusterOn = 32;</code>
   */
  public static final int AT_ClusterOn_VALUE = 32;
  /**
   * <code>AT_DropCluster = 33;</code>
   */
  public static final int AT_DropCluster_VALUE = 33;
  /**
   * <code>AT_SetLogged = 34;</code>
   */
  public static final int AT_SetLogged_VALUE = 34;
  /**
   * <code>AT_SetUnLogged = 35;</code>
   */
  public static final int AT_SetUnLogged_VALUE = 35;
  /**
   * <code>AT_DropOids = 36;</code>
   */
  public static final int AT_DropOids_VALUE = 36;
  /**
   * <code>AT_SetTableSpace = 37;</code>
   */
  public static final int AT_SetTableSpace_VALUE = 37;
  /**
   * <code>AT_SetRelOptions = 38;</code>
   */
  public static final int AT_SetRelOptions_VALUE = 38;
  /**
   * <code>AT_ResetRelOptions = 39;</code>
   */
  public static final int AT_ResetRelOptions_VALUE = 39;
  /**
   * <code>AT_ReplaceRelOptions = 40;</code>
   */
  public static final int AT_ReplaceRelOptions_VALUE = 40;
  /**
   * <code>AT_EnableTrig = 41;</code>
   */
  public static final int AT_EnableTrig_VALUE = 41;
  /**
   * <code>AT_EnableAlwaysTrig = 42;</code>
   */
  public static final int AT_EnableAlwaysTrig_VALUE = 42;
  /**
   * <code>AT_EnableReplicaTrig = 43;</code>
   */
  public static final int AT_EnableReplicaTrig_VALUE = 43;
  /**
   * <code>AT_DisableTrig = 44;</code>
   */
  public static final int AT_DisableTrig_VALUE = 44;
  /**
   * <code>AT_EnableTrigAll = 45;</code>
   */
  public static final int AT_EnableTrigAll_VALUE = 45;
  /**
   * <code>AT_DisableTrigAll = 46;</code>
   */
  public static final int AT_DisableTrigAll_VALUE = 46;
  /**
   * <code>AT_EnableTrigUser = 47;</code>
   */
  public static final int AT_EnableTrigUser_VALUE = 47;
  /**
   * <code>AT_DisableTrigUser = 48;</code>
   */
  public static final int AT_DisableTrigUser_VALUE = 48;
  /**
   * <code>AT_EnableRule = 49;</code>
   */
  public static final int AT_EnableRule_VALUE = 49;
  /**
   * <code>AT_EnableAlwaysRule = 50;</code>
   */
  public static final int AT_EnableAlwaysRule_VALUE = 50;
  /**
   * <code>AT_EnableReplicaRule = 51;</code>
   */
  public static final int AT_EnableReplicaRule_VALUE = 51;
  /**
   * <code>AT_DisableRule = 52;</code>
   */
  public static final int AT_DisableRule_VALUE = 52;
  /**
   * <code>AT_AddInherit = 53;</code>
   */
  public static final int AT_AddInherit_VALUE = 53;
  /**
   * <code>AT_DropInherit = 54;</code>
   */
  public static final int AT_DropInherit_VALUE = 54;
  /**
   * <code>AT_AddOf = 55;</code>
   */
  public static final int AT_AddOf_VALUE = 55;
  /**
   * <code>AT_DropOf = 56;</code>
   */
  public static final int AT_DropOf_VALUE = 56;
  /**
   * <code>AT_ReplicaIdentity = 57;</code>
   */
  public static final int AT_ReplicaIdentity_VALUE = 57;
  /**
   * <code>AT_EnableRowSecurity = 58;</code>
   */
  public static final int AT_EnableRowSecurity_VALUE = 58;
  /**
   * <code>AT_DisableRowSecurity = 59;</code>
   */
  public static final int AT_DisableRowSecurity_VALUE = 59;
  /**
   * <code>AT_ForceRowSecurity = 60;</code>
   */
  public static final int AT_ForceRowSecurity_VALUE = 60;
  /**
   * <code>AT_NoForceRowSecurity = 61;</code>
   */
  public static final int AT_NoForceRowSecurity_VALUE = 61;
  /**
   * <code>AT_GenericOptions = 62;</code>
   */
  public static final int AT_GenericOptions_VALUE = 62;
  /**
   * <code>AT_AttachPartition = 63;</code>
   */
  public static final int AT_AttachPartition_VALUE = 63;
  /**
   * <code>AT_DetachPartition = 64;</code>
   */
  public static final int AT_DetachPartition_VALUE = 64;
  /**
   * <code>AT_AddIdentity = 65;</code>
   */
  public static final int AT_AddIdentity_VALUE = 65;
  /**
   * <code>AT_SetIdentity = 66;</code>
   */
  public static final int AT_SetIdentity_VALUE = 66;
  /**
   * <code>AT_DropIdentity = 67;</code>
   */
  public static final int AT_DropIdentity_VALUE = 67;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AlterTableType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AlterTableType forNumber(int value) {
    switch (value) {
      case 0: return ALTER_TABLE_TYPE_UNDEFINED;
      case 1: return AT_AddColumn;
      case 2: return AT_AddColumnRecurse;
      case 3: return AT_AddColumnToView;
      case 4: return AT_ColumnDefault;
      case 5: return AT_CookedColumnDefault;
      case 6: return AT_DropNotNull;
      case 7: return AT_SetNotNull;
      case 8: return AT_DropExpression;
      case 9: return AT_CheckNotNull;
      case 10: return AT_SetStatistics;
      case 11: return AT_SetOptions;
      case 12: return AT_ResetOptions;
      case 13: return AT_SetStorage;
      case 14: return AT_DropColumn;
      case 15: return AT_DropColumnRecurse;
      case 16: return AT_AddIndex;
      case 17: return AT_ReAddIndex;
      case 18: return AT_AddConstraint;
      case 19: return AT_AddConstraintRecurse;
      case 20: return AT_ReAddConstraint;
      case 21: return AT_ReAddDomainConstraint;
      case 22: return AT_AlterConstraint;
      case 23: return AT_ValidateConstraint;
      case 24: return AT_ValidateConstraintRecurse;
      case 25: return AT_AddIndexConstraint;
      case 26: return AT_DropConstraint;
      case 27: return AT_DropConstraintRecurse;
      case 28: return AT_ReAddComment;
      case 29: return AT_AlterColumnType;
      case 30: return AT_AlterColumnGenericOptions;
      case 31: return AT_ChangeOwner;
      case 32: return AT_ClusterOn;
      case 33: return AT_DropCluster;
      case 34: return AT_SetLogged;
      case 35: return AT_SetUnLogged;
      case 36: return AT_DropOids;
      case 37: return AT_SetTableSpace;
      case 38: return AT_SetRelOptions;
      case 39: return AT_ResetRelOptions;
      case 40: return AT_ReplaceRelOptions;
      case 41: return AT_EnableTrig;
      case 42: return AT_EnableAlwaysTrig;
      case 43: return AT_EnableReplicaTrig;
      case 44: return AT_DisableTrig;
      case 45: return AT_EnableTrigAll;
      case 46: return AT_DisableTrigAll;
      case 47: return AT_EnableTrigUser;
      case 48: return AT_DisableTrigUser;
      case 49: return AT_EnableRule;
      case 50: return AT_EnableAlwaysRule;
      case 51: return AT_EnableReplicaRule;
      case 52: return AT_DisableRule;
      case 53: return AT_AddInherit;
      case 54: return AT_DropInherit;
      case 55: return AT_AddOf;
      case 56: return AT_DropOf;
      case 57: return AT_ReplicaIdentity;
      case 58: return AT_EnableRowSecurity;
      case 59: return AT_DisableRowSecurity;
      case 60: return AT_ForceRowSecurity;
      case 61: return AT_NoForceRowSecurity;
      case 62: return AT_GenericOptions;
      case 63: return AT_AttachPartition;
      case 64: return AT_DetachPartition;
      case 65: return AT_AddIdentity;
      case 66: return AT_SetIdentity;
      case 67: return AT_DropIdentity;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AlterTableType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AlterTableType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AlterTableType>() {
          public AlterTableType findValueByNumber(int number) {
            return AlterTableType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.premiumminds.sonar.plpgsql.protobuf.PgQuery.getDescriptor().getEnumTypes().get(16);
  }

  private static final AlterTableType[] VALUES = values();

  public static AlterTableType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AlterTableType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:pg_query.AlterTableType)
}

