package com.premiumminds.sonar.plpgsql.libpg_query;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;

/**
 * JNA Wrapper for library <b>test</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface PGQueryLibrary extends Library {

    public static final PGQueryLibrary INSTANCE = (PGQueryLibrary)Native.load("libpg_query.so", PGQueryLibrary.class);
    /**
     * Original signature : <code>PgQueryParseResult pg_query_parse(const char*)</code><br>
     * <i>native declaration : line 17</i><br>
     * @deprecated use the safer methods {@link #pg_query_parse(String)} and {@link #pg_query_parse(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    PgQueryParseResult.ByValue pg_query_parse(Pointer input);
    /**
     * Original signature : <code>PgQueryParseResult pg_query_parse(const char*)</code><br>
     * <i>native declaration : line 17</i>
     */
    PgQueryParseResult.ByValue pg_query_parse(String input);

    /**
     * Original signature : <code>void pg_query_free_parse_result(PgQueryParseResult)</code><br>
     * <i>native declaration : line 19</i>
     */
    void pg_query_free_parse_result(PgQueryParseResult.ByValue result);


    /**
     * Original signature : <code>PgQueryProtobufParseResult pg_query_parse_protobuf(const char*)</code><br>
     * <i>native declaration : line 23</i><br>
     * @deprecated use the safer methods {@link #pg_query_parse_protobuf(java.lang.String)} and {@link #pg_query_parse_protobuf(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    PgQueryProtobufParseResult.ByValue pg_query_parse_protobuf(Pointer input);
    /**
     * Original signature : <code>PgQueryProtobufParseResult pg_query_parse_protobuf(const char*)</code><br>
     * <i>native declaration : line 23</i>
     */
    PgQueryProtobufParseResult.ByValue pg_query_parse_protobuf(String input);

    /**
     * Original signature : <code>void pg_query_free_protobuf_parse_result(PgQueryProtobufParseResult)</code><br>
     * <i>native declaration : line 25</i>
     */
    void pg_query_free_protobuf_parse_result(PgQueryProtobufParseResult.ByValue result);

    /**
     * Original signature : <code>PgQueryScanResult pg_query_scan(const char*)</code><br>
     * <i>native declaration : line 29</i><br>
     * @deprecated use the safer methods {@link #pg_query_scan(java.lang.String)} and {@link #pg_query_scan(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    PgQueryScanResult.ByValue pg_query_scan(Pointer input);
    /**
     * Original signature : <code>PgQueryScanResult pg_query_scan(const char*)</code><br>
     * <i>native declaration : line 29</i>
     */
    PgQueryScanResult.ByValue pg_query_scan(String input);
    /**
     * Original signature : <code>void pg_query_free_scan_result(PgQueryScanResult)</code><br>
     * <i>native declaration : line 30</i>
     */
    void pg_query_free_scan_result(PgQueryScanResult.ByValue result);
}